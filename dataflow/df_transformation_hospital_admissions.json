{
	"name": "df_transformation_hospital_admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_raw_hospital_admissions",
						"type": "DatasetReference"
					},
					"name": "hospitalAdmissionsSource"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_country_lookup",
						"type": "DatasetReference"
					},
					"name": "sourceCountryLookupFile"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_lookup_dim_date",
						"type": "DatasetReference"
					},
					"name": "dimDateSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adls_processed_hospital_admission_daily",
						"type": "DatasetReference"
					},
					"name": "sinkDaily"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_processed_hospital_admissions_weekly",
						"type": "DatasetReference"
					},
					"name": "sinkWeekly"
				}
			],
			"transformations": [
				{
					"name": "selectRequiredFieldsAndRename"
				},
				{
					"name": "lookupForCountryCode"
				},
				{
					"name": "selectRequiredFields"
				},
				{
					"name": "split"
				},
				{
					"name": "aggForWeekStartAndEndDates"
				},
				{
					"name": "joinReportingEndDate"
				},
				{
					"name": "pivotIndicatorWeekly"
				},
				{
					"name": "pivotDaily"
				},
				{
					"name": "sortWeekly"
				},
				{
					"name": "sortDaily"
				},
				{
					"name": "selectRequiredFieldsForSink"
				},
				{
					"name": "selectDaily"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> hospitalAdmissionsSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceCountryLookupFile",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dimDateSource",
				"hospitalAdmissionsSource select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reporting_date = date,",
				"          reporting_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredFieldsAndRename",
				"selectRequiredFieldsAndRename, sourceCountryLookupFile lookup(selectRequiredFieldsAndRename@country == sourceCountryLookupFile@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupForCountryCode",
				"lookupForCountryCode select(mapColumn(",
				"          country = selectRequiredFieldsAndRename@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          indicator,",
				"          reporting_date,",
				"          reporting_year_week,",
				"          value,",
				"          source,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredFields",
				"selectRequiredFields split(indicator==\"Weekly new hospital admissions per 100k\" || indicator == \"Weekly new ICU admissions per 100k\",",
				"     disjoint: false) ~> split@(Weekly, Daily)",
				"dimDateSource aggregate(groupBy(reporting_year_Week = year+'-W'+lpad(week_of_year,2,'0')),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> aggForWeekStartAndEndDates",
				"split@Weekly, aggForWeekStartAndEndDates join(split@Weekly@reporting_year_week == aggForWeekStartAndEndDates@reporting_year_Week,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> joinReportingEndDate",
				"joinReportingEndDate pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          split@Weekly@reporting_year_week,",
				"          source,",
				"          week_start_date,",
				"          week_end_date),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     { Count} = sum(value),",
				"     columnNaming: '$N_$V',",
				"     lateral: true) ~> pivotIndicatorWeekly",
				"split@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          reporting_date,",
				"          source,",
				"          population),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     Count = sum(value),",
				"     columnNaming: '$N_$V',",
				"     lateral: true) ~> pivotDaily",
				"pivotIndicatorWeekly sort(desc(reporting_year_week, true),",
				"     asc(country, true),",
				"     caseInsensitive: true,",
				"     partitionBy('hash', 1)) ~> sortWeekly",
				"pivotDaily sort(desc(reporting_date, true),",
				"     asc(country, true)) ~> sortDaily",
				"sortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week = reporting_year_week,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          new_hospital_occupancy_count = { Count_Weekly new hospital admissions per 100k},",
				"          new_icu_occupancy_count = { Count_Weekly new ICU admissions per 100k},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredFieldsForSink",
				"sortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date = reporting_date,",
				"          hospital_occupancy_count = {Count_Daily hospital occupancy},",
				"          icu_occupancy_count = {Count_Daily ICU occupancy},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDaily",
				"selectDaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['hospital_admissions_daily.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkDaily",
				"selectRequiredFieldsForSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['hospital_admissions_weekly.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkWeekly"
			]
		}
	}
}
{
	"name": "df_transformation_cases_deaths",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_raw_caases_deaths",
						"type": "DatasetReference"
					},
					"name": "CasesAndDeathsSource"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_country_lookup",
						"type": "DatasetReference"
					},
					"name": "CountryLookupSourceFile"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_transformed_cases_deaths",
						"type": "DatasetReference"
					},
					"name": "casesAndDeathsSink"
				}
			],
			"transformations": [
				{
					"name": "filterEuropeData"
				},
				{
					"name": "selectFields"
				},
				{
					"name": "pivotConfirmedAndDeathCases"
				},
				{
					"name": "lookupCountryCode"
				},
				{
					"name": "selectForSink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as integer,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CasesAndDeathsSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryLookupSourceFile",
				"CasesAndDeathsSource filter(continent=='Europe' && not(isNull(country_code))) ~> filterEuropeData",
				"filterEuropeData select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          source,",
				"          each(match(name=='date'),",
				"               'reporting_date' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectFields",
				"selectFields pivot(groupBy(country,",
				"          country_code,",
				"          reporting_date,",
				"          source,",
				"          population),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     Count = sum(daily_count),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotConfirmedAndDeathCases",
				"pivotConfirmedAndDeathCases, CountryLookupSourceFile lookup(pivotConfirmedAndDeathCases@country == CountryLookupSourceFile@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountryCode",
				"lookupCountryCode select(mapColumn(",
				"          country = pivotConfirmedAndDeathCases@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = pivotConfirmedAndDeathCases@population,",
				"          cases_count = {confirmed cases_Count},",
				"          deaths_count = deaths_Count,",
				"          reporting_date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectForSink",
				"selectForSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['cases_deaths.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> casesAndDeathsSink"
			]
		}
	}
}